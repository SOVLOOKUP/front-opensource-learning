// eslint-disable-next-line max-lines
import { Input, Switch, Select, Slider } from 'antd';
import {
  TrademarkCircleOutlined,
  DeploymentUnitOutlined,
  BranchesOutlined,
  ApartmentOutlined,
  GatewayOutlined,
  CopyrightCircleOutlined,
  ForkOutlined,
  ShareAltOutlined,
  MediumOutlined,
} from '@ant-design/icons';
import TwoInput from './twoInput';
import { LayoutConfig } from '@antv/graphin-components';

const graphLayoutConfig: {
  [key: string]: LayoutConfig[];
} = {
  graphLayout_force: [
    {
      title: '经典力导向布局',
      type: 'force',
      icon: BranchesOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          labelZh: '布局中心',
          key: 'layoutConfig.center',
          inputLabel: ['x', 'y'],
          defaultValue: [500, 300],
          description: '布局的中心点，默认为图的中心点',
        },
        {
          component: Slider,
          label: 'linkDistance',
          labelZh: '边长度',
          key: 'layoutConfig.linkDistance',
          defaultValue: 150,
          max: 500,
          min: 1,
          description: '边的长度，默认为50',
        },
        {
          component: Slider,
          label: 'nodeStrength',
          labelZh: '节点作用力',
          key: 'layoutConfig.nodeStrength',
          defaultValue: -35,
          min: -100,
          max: 500,
          description: '节点作用力，正数代表节点之间的引力作用，负数代表节点之间的斥力作用',
        },
        {
          component: Slider,
          label: 'edgeStrength',
          labelZh: '边作用力',
          key: 'layoutConfig.edgeStrength',
          defaultValue: 0.2,
          step: 0.1,
          min: 0,
          max: 1,
          description: '边的作用力，默认根据节点的出入度自适应',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'preventOverlap',
          labelZh: '是否防止重叠',
          key: 'layoutConfig.preventOverlap',
          defaultValue: true,
          size: 'small',
          description:
            '是否防止重叠，设置为true以后，可以避免节点重叠在一起，该参数必须配合nodeSize使用，只有当nodeSize与节点大小相同时，才能够进行重叠的碰撞检测',
        },
        {
          component: Slider,
          label: 'nodeSize',
          labelZh: '节点占布局空间',
          key: 'layoutConfig.nodeSize',
          defaultValue: 0,
          min: 0,
          max: 200,
          description: '节点在布局中所占空间大小（直径），用于碰撞检测，若设置为0，则使用节点本身的大小',
        },
        {
          component: Slider,
          label: 'nodeSpacing',
          labelZh: '节点间距',
          key: 'layoutConfig.nodeSpacing',
          defaultValue: 15,
          min: 0,
          max: 200,
          description: 'preventOverlap为true时生效，防止重叠时节点边缘间距的最小值',
        },
        {
          component: Slider,
          label: 'collideStrength',
          labelZh: '防重叠力强度',
          key: 'layoutConfig.collideStrength',
          max: 5,
          min: 0,
          defaultValue: 1,
          step: 0.2,
          description: '防止重叠的力的强度，取值范围[0, 1]，默认值为1',
        },
        {
          component: Slider,
          label: 'alpha',
          labelZh: '收敛阈值',
          key: 'layoutConfig.alpha',
          max: 1,
          min: 0.001,
          defaultValue: 0.3,
          step: 0.001,
          description: '当前迭代的收敛阈值，默认值为0.3，该值设置的越大，迭代越容易收敛，但布局质量不高',
        },
        {
          component: Slider,
          label: 'alphaDecay',
          labelZh: '衰减率',
          key: 'layoutConfig.alphaDecay',
          defaultValue: 0.028,
          max: 1,
          min: 0.001,
          step: 0.001,
          description: '力导布局迭代阈值的衰减率，范围为[0, 1]，默认值为0.028，对应的迭代数为300',
        },
        {
          component: Slider,
          label: 'alphaMin',
          labelZh: '停止迭代阈值',
          key: 'layoutConfig.alphaMin',
          defaultValue: 0.002,
          max: 1,
          min: 0.001,
          step: 0.001,
          description: '停止迭代的阈值，当收敛阈值小于该值时，就会停止迭代',
        },
      ],
    },
  ],
  graphLayout_concentric: [
    {
      title: '同心圆布局',
      type: 'concentric',
      icon: DeploymentUnitOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          labelZh: '中心点',
          key: 'layoutConfig.center',
          defaultValue: [500, 300],
          description: '布局的中心点，默认值为图的中心',
        },
        {
          component: Slider,
          label: 'nodeSize',
          labelZh: '节点大小',
          key: 'layoutConfig.nodeSize',
          defaultValue: 50,
          description: '节点的大小（直径），用于防止节点重叠时的碰撞检测',
        },
        {
          component: Slider,
          label: 'minNodeSpacing',
          labelZh: '最小间距',
          key: 'layoutConfig.minNodeSpacing',
          defaultValue: 10,
          description: '环与环之间的最小间距，用于调整半径，默认值为10',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'preventOverlap',
          labelZh: '是否防止重叠',
          key: 'layoutConfig.preventOverlap',
          defaultValue: true,
          size: 'small',
          description:
            '是否防止重叠，设置为true后，可以避免节点之间相互重叠，必须配置nodeSize使用，只有当nodeSIze设置为和节点大小一致时，才会进行节点重叠的碰撞检测',
        },
        {
          component: Slider,
          label: 'sweep',
          labelZh: '弧度差',
          key: 'layoutConfig.sweep',
          defaultValue: undefined,
          min: 0,
          max: 10,
          description: '第一个节点和最后一个节点之间的弧度差',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'equidistant',
          labelZh: '是否等间距',
          key: 'layoutConfig.equidistant',
          defaultValue: false,
          size: 'small',
          description: '环与环之间的距离是否相等，默认为false，设置为true，在视觉上比较统一',
        },
        {
          component: Slider,
          label: 'startAngle',
          labelZh: '起始弧度',
          key: 'layoutConfig.startAngle',
          defaultValue: (3 / 2) * Math.PI,
          min: 0,
          max: 2 * Math.PI,
          step: 0.1 * Math.PI,
          description: '节点的起始弧度值，默认为3 / 2 * Math.PI',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'clockwise',
          labelZh: '是否顺时针',
          key: 'layoutConfig.clockwise',
          defaultValue: false,
          size: 'small',
          description: '是否按照顺时针方向排列，默认为false',
        },
        {
          component: Select,
          label: 'sortBy',
          labelZh: '排序依据',
          key: 'layoutConfig.sortBy',
          size: 'small',
          defaultValue: null,
          options: [
            { label: null, value: null },
            { label: 'topology', value: 'topology' },
            { label: 'degree', value: 'degree' },
          ],
          description: '指定排序的依据，即节点的某个属性名，数值越高则该节点被放置的越中心',
        },
      ],
    },
  ],
  graphLayout_radial: [
    {
      title: '辐射布局',
      type: 'radial',
      icon: ShareAltOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          labelZh: '中心点',
          key: 'layoutConfig.center',
          defaultValue: [500, 300],
          description: '布局的中心点，默认值为图的中心',
        },
        {
          component: Slider,
          label: 'unitRadius',
          labelZh: '层级距离',
          key: 'layoutConfig.unitRadius',
          defaultValue: 100,
          max: 500,
          min: 1,
          description: '每一圈距离上一圈的距离，默认值为100，填充整个画布，即根据图的大小决定',
        },
        {
          component: Slider,
          label: 'linkDistance',
          labelZh: '边长度',
          key: 'layoutConfig.linkDistance',
          defaultValue: 50,
          min: 1,
          max: 500,
          description: '边的长度，默认值50',
        },
        {
          component: Slider,
          label: 'maxIteration',
          labelZh: '最大迭代次数',
          key: 'layoutConfig.maxIteration',
          defaultValue: 1000,
          max: 10000,
          min: 1,
          description: '最大迭代次数，当迭代达到设定的值时，就会停止迭代',
        },
        {
          component: Input,
          label: 'focusNode',
          labelZh: '中心节点',
          key: 'layoutConfig.focusNode',
          size: 'small',
          defaultValue: null,
          description: '辐射的中心节点，默认为数据中第一个节点，可以设置为节点的ID',
        },
        {
          component: Slider,
          label: 'nodeSize',
          labelZh: '节点占布局空间',
          key: 'layoutConfig.nodeSize',
          defaultValue: 0,
          min: 0,
          max: 200,
          description:
            '节点在布局计算中所占空间大小（直径），用于防止节点重叠时的碰撞检测。设置为0时，将使用节点本身大小',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'preventOverlap',
          labelZh: '是否防止重叠',
          key: 'layoutConfig.preventOverlap',
          defaultValue: true,
          size: 'small',
          description:
            '是否防止重叠，开启后，可以避免节点之间的相互重叠，必须配置nodeSize使用，只有当设置的nodeSize值与节点大小相同时，才会进行节点重叠的碰撞检测',
        },
        {
          component: Slider,
          label: 'nodeSpacing',
          labelZh: '节点间距',
          key: 'layoutConfig.nodeSpacing',
          defaultValue: 20,
          min: 1,
          max: 100,
          description: 'preventOverlap为true时生效，防止重叠时节点边缘间距的最小值，默认值为10',
        },
        {
          component: Slider,
          label: 'maxPreventOverlapIteration',
          labelZh: '最大重叠迭代',
          key: 'layoutConfig.maxPreventOverlapIteration',
          defaultValue: 200,
          max: 1000,
          min: 1,
          description: '防止重叠步骤的最大迭代次数，当超过设置的迭代次数后，及时还有节点重叠，也不会再进行迭代调整',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'strictRadial',
          labelZh: '是否严格',
          key: 'layoutConfig.strictRadial',
          defaultValue: false,
          size: 'small',
          description: '是否是严格的辐射布局，即每一层的节点严格在一个环上，preventOverlap为true时生效',
        },
        {
          component: Input,
          label: 'sortBy',
          labelZh: '排序依据',
          key: 'layoutConfig.sortBy',
          size: 'small',
          defaultValue: undefined,
          description:
            '同层节点布局后相距远近的依据，默认为undefined，表示根据数据的拓扑结构排序，可以设置为数据中某个字段，根据指定的字段进行排序',
        },
        {
          component: Slider,
          label: 'sortStrength',
          labelZh: '排序强度',
          key: 'layoutConfig.sortStrength',
          defaultValue: 10,
          min: 1,
          max: 100,
          description:
            '同层节点根据sortBy排列的强度，sortBy不为undefined时生效，数值越大，sortBy指定的方式计算出距离越小的越靠近',
        },
      ],
    },
  ],
  graphLayout_circular: [
    {
      title: '圆形布局',
      type: 'circular',
      icon: CopyrightCircleOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          labelZh: '中心点',
          key: 'layoutConfig.center',
          defaultValue: [500, 300],
          description: '布局的中心点，默认值为图的中心',
        },
        {
          component: Slider,
          label: 'radius',
          labelZh: '半径',
          key: 'layoutConfig.radius',
          defaultValue: 100,
          max: 2500,
          min: 1,
          description: '圆的半径，默认值为100',
        },
        {
          component: Slider,
          label: 'startAngle',
          labelZh: '起始角度',
          key: 'layoutConfig.startAngle',
          defaultValue: 0,
          max: 2 * Math.PI,
          min: 0,
          step: 0.1 * Math.PI,
          description: '圆环起始的位置对应的角度',
        },
        {
          component: Slider,
          label: 'endAngle',
          labelZh: '结束角度',
          key: 'layoutConfig.starAngle',
          defaultValue: 2 * Math.PI,
          max: 2 * Math.PI,
          min: 0,
          step: 0.1 * Math.PI,
          description: '圆环结束的位置对应的角度',
        },
        // {
        //   component: Slider,
        //   label: 'startRadius',
        //   labelZh: '起始半径',
        //   key: 'layoutConfig.startRadius',
        // },
        // {
        //   component: Slider,
        //   label: 'endRadius',
        //   key: 'layoutConfig.endRadius',
        // },
        {
          component: Switch,
          isSwitch: true,
          label: 'clockwise',
          labelZh: '是否顺时针',
          key: 'layoutConfig.clockwise',
          defaultValue: true,
          size: 'small',
          description: '是否顺时针排列，默认值为true',
        },
        {
          component: Slider,
          label: 'divisions',
          labelZh: '分段数',
          key: 'layoutConfig.divisions',
          defaultValue: 1,
          max: 10,
          min: 1,
          description: '节点在环上的分段数，设置后将会均匀分布在圆环上',
        },
        {
          component: Select,
          label: 'ordering',
          labelZh: '排序依据',
          key: 'layoutConfig.ordering',
          size: 'small',
          defaultValue: null,
          options: [
            { label: null, value: null },
            { label: 'topology', value: 'topology' },
            { label: 'degree', value: 'degree' },
          ],
          description:
            '节点在环上的排序的依据，默认null代表直接使用数据中的顺序，topology表示按拓扑排序，degree表示按节点度数排序',
        },
        {
          component: Slider,
          label: 'angleRatio',
          labelZh: '间隔',
          key: 'layoutConfig.angleRatio',
          defaultValue: 1,
          description: '从第一个节点到最后一个节点之间相隔多少个2*PI，表示节点之间的紧密程度',
        },
      ],
    },
  ],
  graphLayout_dagre: [
    {
      title: 'Dagre布局',
      type: 'dagre',
      icon: ApartmentOutlined,
      items: [
        {
          component: Select,
          label: 'rankdir',
          labelZh: '布局方向',
          key: 'layoutConfig.rankdir',
          defaultValue: 'TB',
          size: 'small',
          options: [
            { label: 'TB', value: 'TB' },
            { label: 'BT', value: 'BT' },
            { label: 'LR', value: 'LR' },
            { label: 'RL', value: 'RL' },
          ],
          description:
            '布局的方向，默认值TB，即从上至下布局，TB表示从上至下布局，BT表示从下至上布局，LR表示从左至右布局，RL表示从右至左布局',
        },
        {
          component: Select,
          label: 'align',
          labelZh: '对齐方式',
          key: 'layoutConfig.align',
          defaultValue: undefined,
          size: 'small',
          options: [
            { label: null, value: null },
            { label: 'UL', value: 'UL' },
            { label: 'UR', value: 'UR' },
            { label: 'DL', value: 'DL' },
            { label: 'DR', value: 'DR' },
          ],
          description:
            '节点的对齐方式，默认为UL，即对齐到左上角，UL表示对齐到左上角，UR表示对齐到右下角，DL表示对齐到左下角，DR表示对齐到右下角',
        },
        {
          component: Slider,
          label: 'nodeSize',
          labelZh: '节点占布局空间',
          key: 'layoutConfig.nodeSize',
          defaultValue: 0,
          max: 200,
          min: 0,
          description: '节点参与布局所占的空间大小。若设置为0，将使用节点本身的大小',
        },
        {
          component: Slider,
          label: 'nodesep',
          labelZh: '节点间距',
          key: 'layoutConfig.nodesep',
          defaultValue: 10,
          max: 200,
          min: 1,
          description: '节点的间距，rankdir为TB或BT时是水平间距，rankdir为LR或RL时为垂直方向上的间距',
        },
        {
          component: Input,
          label: 'ranksep',
          labelZh: '层间距',
          key: 'layoutConfig.ranksep',
          size: 'small',
          defaultValue: 10,
          max: 200,
          min: 1,
          description:
            '各层之间的间距，rankdir为TB或BT时是垂直方向相邻层之间的间距，rankdir为LR或RL时为水平方向上相邻层之间的间距',
        },
        // 控制点适用于 polyline，目前使用的是 quadratic
        // {
        //   component: Switch,
        //   isSwitch: true,
        //   label: 'controlPoints',
        //   labelZh: '是否保留控制点',
        //   key: 'layoutConfig.controlPoints',
        //   defaultValue: true,
        //   size: 'small',
        //   description: '是否保留布局连线的控制点，默认为true，设置为false后，则连接到节点的中心点'
        // },
      ],
    },
  ],
  graphLayout_grid: [
    {
      title: '网格布局',
      type: 'grid',
      icon: GatewayOutlined,
      items: [
        {
          component: TwoInput,
          label: 'begin',
          labelZh: '起始位置',
          key: 'layoutConfig.begin',
          inputLabel: ['x', 'y'],
          isPx: false,
          defaultValue: [50, 150],
          description: '网格左上角的位置，默认值为(0, 0)点',
        },
        {
          component: Slider,
          label: 'width',
          labelZh: '布局宽度',
          key: 'layoutConfig.width',
          defaultValue: 200,
          min: 10,
          max: 5000,
          description: '布局的宽度',
        },
        {
          component: Slider,
          label: 'height',
          labelZh: '布局高度',
          key: 'layoutConfig.height',
          defaultValue: 200,
          min: 10,
          max: 5000,
          description: '布局的高度',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'preventOverlap',
          labelZh: '是否避免重叠',
          key: 'layoutConfig.preventOverlap',
          defaultValue: false,
          size: 'small',
          description:
            '是否防止节点重叠，开启后可以避免节点重叠在一起，必须配合nodeSize属性使用，只有设置了与图中节点大小相同的nodeSize值，才能够进行碰撞检测',
        },
        {
          component: Slider,
          label: 'preventOverlapPadding',
          labelZh: '节点间距',
          key: 'layoutConfig.preventOverlapPadding',
          defaultValue: 10,
          min: 1,
          max: 100,
          description: '避免重叠时节点的间距值，当preventOverlap为true时生效',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'condense',
          labelZh: '是否压缩',
          key: 'layoutConfig.condense',
          defaultValue: false,
          size: 'small',
          description: '为true时利用最小画布空间，为false时利用所有可用画布大小',
        },
        {
          component: Slider,
          label: 'rows',
          labelZh: '网格行数',
          key: 'layoutConfig.rows',
          defaultValue: 10,
          min: 1,
          max: 500,
          description: '网格的行数，默认值为10',
        },
        {
          component: Slider,
          label: 'cols',
          labelZh: '网格列数',
          key: 'layoutConfig.cols',
          defaultValue: 10,
          min: 1,
          max: 500,
          description: '网格的列数，默认值为10',
        },
        {
          component: Select,
          label: 'sortBy',
          labelZh: '排序依据',
          key: 'layoutConfig.sortBy',
          size: 'small',
          defaultValue: null,
          options: [
            { label: null, value: null },
            { label: 'topology', value: 'topology' },
            { label: 'degree', value: 'degree' },
          ],
          description:
            '指定排序的依据，即根据节点的哪个属性进行排序，数值越高则该节点被放置得越中心，如果不指定，则会计算节点的度数，度数越高，节点将被放置得越中心',
        },
      ],
    },
  ],
  graphLayout_fruchterman: [
    {
      title: 'Fruchterman布局',
      type: 'fructherman',
      icon: ForkOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          labelZh: '中心点',
          key: 'layoutConfig.center',
          defaultValue: [500, 300],
          description: '布局的中心点，默认值为图的中心',
        },
        {
          component: Slider,
          label: 'maxIteration',
          labelZh: '最大迭代次数',
          key: 'layoutConfig.maxIteration',
          defaultValue: 1000,
          max: 10000,
          min: 1,
          description: '最大的迭代次数，默认值为1000，超过该值就会停止迭代',
        },
        {
          component: Slider,
          label: 'gravity',
          labelZh: '重力大小',
          key: 'layoutConfig.gravity',
          defaultValue: 10,
          min: 0,
          max: 1000,
          description: '重力的大小，该值会影响布局的紧凑程度，默认值为10',
        },
        {
          component: Slider,
          label: 'speed',
          labelZh: '移动速度',
          key: 'layoutConfig.speed',
          defaultValue: 1,
          min: 1,
          max: 1000,
          description: '每次迭代时节点的移动速度，速度太快可能会导致强烈震荡',
        },
        {
          component: Switch,
          isSwitch: true,
          label: 'clustering',
          labelZh: '是否聚类',
          key: 'layoutConfig.clustering',
          defaultValue: false,
          size: 'small',
          description:
            '是否按照聚类布局，开启后，布局时就会将同一类型的节点布局到一起，布局结果就会呈现出明显的聚类效果',
        },
        {
          component: Slider,
          label: 'clusterGravity',
          labelZh: '聚类重力',
          key: 'layoutConfig.clusterGravity',
          defaultValue: 10,
          min: 0,
          max: 1000,
          description: '聚类内部的重力大小，影响聚类的紧凑程度，只有在clustering为true时生效',
        },
        {
          component: Slider,
          label: 'width',
          labelZh: '宽度',
          key: 'layoutConfig.width',
          max: 5000,
          min: 10,
          defaultValue: 800,
          description: '布局的宽度，默认值为画布宽度',
        },
        {
          component: Slider,
          label: 'height',
          labelZh: '高度',
          key: 'layoutConfig.height',
          max: 5000,
          min: 10,
          defaultValue: 500,
          description: '布局的高度，默认值为画布高度',
        },
      ],
    },
  ],
  graphLayout_mds: [
    {
      title: 'MDS 布局',
      type: 'mds',
      icon: MediumOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          labelZh: '中心点',
          key: 'layoutConfig.center',
          defaultValue: [500, 300],
          description: '布局的中心点，默认值为图的中心',
        },
        {
          component: Slider,
          label: 'linkDistance',
          labelZh: '边长度',
          key: 'layoutConfig.linkDistance',
          defaultValue: 200,
          max: 500,
          min: 1,
          description: '边的长度，默认值为50',
        },
      ],
    },
  ],
  graphLayout_random: [
    {
      title: '随机布局',
      type: 'random',
      icon: TrademarkCircleOutlined,
      items: [
        {
          component: TwoInput,
          label: 'center',
          defaultValue: [500, 300],
          labelZh: '中心点',
          key: 'layoutConfig.center',
          description: '布局的中心点，默认值为图的中心',
        },
        {
          component: Slider,
          label: 'width',
          labelZh: '宽度',
          key: 'layoutConfig.width',
          max: 5000,
          min: 10,
          defaultValue: 800,
          description: '布局的宽度，默认值为画布宽度',
        },
        {
          component: Slider,
          label: 'height',
          labelZh: '高度',
          key: 'layoutConfig.height',
          max: 5000,
          min: 10,
          defaultValue: 500,
          description: '布局的高度，默认值为画布高度',
        },
      ],
    },
  ],
};
export default graphLayoutConfig;